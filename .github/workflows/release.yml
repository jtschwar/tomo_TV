name: Build and Publish to PyPI

on:
  push:
    branches: [ main, refactor ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build manylinux wheels with CUDA
      run: |
        docker build -f docker/Dockerfile.manylinux -t tomo-tv-builder .
        docker run --rm -v $PWD/dist:/output tomo-tv-builder
        
    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: dist/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
        
    - name: Build sdist
      run: python -m build --sdist
      
    - name: Upload sdist as artifact
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: dist/*.tar.gz

  test-wheels:
    name: Test wheels
    needs: [build-wheels]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: wheels
        path: dist/
        
    - name: Install wheel
      run: |
        pip install --find-links dist/ tomo_tv
        
    - name: Test import
      run: python -c "import tomo_tv; print('Import successful')"

  publish:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist, test-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist/
        
    - name: Flatten artifacts
      run: |
        find dist/ -name "*.whl" -exec mv {} dist/ \;
        find dist/ -name "*.tar.gz" -exec mv {} dist/ \;
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        
  publish-test:
    name: Publish to Test PyPI
    needs: [build-wheels, build-sdist, test-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/refactor'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist/
        
    - name: Flatten artifacts
      run: |
        find dist/ -name "*.whl" -exec mv {} dist/ \;
        find dist/ -name "*.tar.gz" -exec mv {} dist/ \;
        
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/